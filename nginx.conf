##
# Security headers
# reference: https://gist.github.com/plentz/6737338
# read more here http://tautt.com/best-nginx-configuration-for-security/
##

# don't send the nginx version number in error pages and Server header
server_tokens off;

log_format kv 'remote_addr="$remote_addr" remote_user="$remote_user" time_local="$time_local" '
                    'request="$request" status="$status" body_bytes_sent="$body_bytes_sent" '
                    'http_referer="$http_referer" http_user_agent="$http_user_agent" '
                    'response_time="$request_time" upstream_response_time="$upstream_response_time" gzip_ratio="$gzip_ratio"';

log_format json '{'
  '"request": {'
    '"remote_address": "$remote_addr",'
    '"request": "$request",'
    '"remote_user": "$remote_user",'
    '"headers": {'
      '"host": "$http_host",'
      '"referer": "$http_referer",'
      '"user_agent": "$http_user_agent",'
      '"x_forwarded_for": "$http_x_forwarded_for"'
    '}'
  '},'
  '"response": {'
    '"status":"$status",'
    '"response_time":$request_time,'
    '"gzip_ratio":"$gzip_ratio",'
    '"bytes_sent":"$body_bytes_sent"'
  '}'
'}';


server {
  listen       8080;
  # TODO 2017-09-20 pj Not support in 1.9
  # absolute_redirect off;
  port_in_redirect off;
  server_name  localhost;

  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  add_header X-Content-Type-Options nosniff;

  # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
  # this particular website if it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

  # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
  # https://www.owasp.org/index.php/Content_Security_Policy
  # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
  # directives for css and js(if you have inline css or js, you will need to keep it too).
  # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
  set $CSP '';
	set $CSP "${CSP}default-src ";
		set $CSP "${CSP}'self'; ";

	set $CSP "${CSP}script-src ";
		set $CSP "${CSP}'self' ";
		set $CSP "${CSP}'unsafe-inline' ";
		set $CSP "${CSP}'unsafe-eval' ";
		set $CSP "${CSP}https://*.example.com ";

	set $CSP "${CSP}img-src ";
		set $CSP "${CSP}'self' ";
		set $CSP "${CSP}data: ";
		set $CSP "${CSP}blob: ";
		set $CSP "${CSP}https://*.example.com ";

	set $CSP "${CSP}style-src ";
		set $CSP "${CSP}'self' ";
		set $CSP "${CSP}'unsafe-inline'; ";

	set $CSP "${CSP}font-src ";
		set $CSP "${CSP}'self'; ";

	set $CSP "${CSP}child-src ";
		set $CSP "${CSP}'self' ";
		set $CSP "${CSP}https://*.example.com ";

	set $CSP "${CSP}object-src ";
		set $CSP "${CSP}'self' ";
		set $CSP "${CSP}blob:; ";

	set $CSP "${CSP}connect-src ";
		set $CSP "${CSP}'self' ";
		set $CSP "${CSP}blob: ";
		set $CSP "${CSP}https://*.example.com ";
  add_header Content-Security-Policy $CSP;

  # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  # also https://hstspreload.org/
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

  ##
  # Gzip Settings
  ##
  gzip on;
  gzip_http_version 1.1;
  gzip_disable "MSIE [1-6]\.";
  gzip_min_length   1100;
  gzip_vary         on;
  gzip_proxied      expired no-cache no-store private auth;
  gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
  gzip_comp_level   9;

  access_log /var/log/nginx/access.log json;

  root   /usr/share/nginx/html;

  location / {
    index  index.html index.htm;
    try_files $uri $uri/ /index.html;
  }

  location ~ /advisors/quote/deploy-config/config.json$ {
    rewrite ^/advisors/quote/deploy-config/config.json$ /deploy-config/config.json last;
  }

  location ~ /advisors/quote(.*)/images/(.+)$ {
    rewrite ^/advisors/quote(.*)/images/(.+)$ /images/$2 last;
  }

  location ~ /advisors/quote(.*)/fonts/(.+)$ {
    rewrite ^/advisors/quote(.*)/fonts/(.+)$ /fonts/$2 last;
  }

  location ~ /advisors/quote(.*)/pdf-viewer/(.+)$ {
    rewrite ^/advisors/quote(.*)/pdf-viewer/(.+)$ /pdf-viewer/$2 last;
  }

  location ~ /advisors/quote(.*)/(.+)\.(.+)$ {
    rewrite ^/advisors/quote(.*)/(.+)\.(.+)$ /$2.$3 last;
  }

  location ~ /advisors/quote(.+)$ {
    rewrite ^/advisors/quote(.+)$ $1 last;
  }

  location ~ /advisors/quote$ {
    rewrite ^(.*)$ $1/ redirect;
  }

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
    root   /usr/share/nginx/html;
  }
}
